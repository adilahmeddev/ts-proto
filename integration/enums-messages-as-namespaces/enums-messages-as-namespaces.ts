// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: enums-messages-as-namespaces.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export declare namespace Cool {
  export interface Cool {
    widget?: Cool_Widget.Cool_Widget | undefined;
  }
}

export namespace Cool {
  export const GlobalTheme = { LIGHT: 0, DARK: 1, AUTO: 2, UNRECOGNIZED: -1 } as const;

  export type GlobalTheme = typeof GlobalTheme[keyof typeof GlobalTheme];

  export namespace GlobalTheme {
    export type LIGHT = typeof GlobalTheme.LIGHT;
    export type DARK = typeof GlobalTheme.DARK;
    export type AUTO = typeof GlobalTheme.AUTO;
    export type UNRECOGNIZED = typeof GlobalTheme.UNRECOGNIZED;
  }
}

export function cool_GlobalThemeFromJSON(object: any): Cool.GlobalTheme {
  switch (object) {
    case 0:
    case "LIGHT":
      return Cool.GlobalTheme.LIGHT;
    case 1:
    case "DARK":
      return Cool.GlobalTheme.DARK;
    case 2:
    case "AUTO":
      return Cool.GlobalTheme.AUTO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Cool.GlobalTheme.UNRECOGNIZED;
  }
}

export function cool_GlobalThemeToJSON(object: Cool.GlobalTheme): string {
  switch (object) {
    case Cool.GlobalTheme.LIGHT:
      return "LIGHT";
    case Cool.GlobalTheme.DARK:
      return "DARK";
    case Cool.GlobalTheme.AUTO:
      return "AUTO";
    case Cool.GlobalTheme.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export declare namespace Cool_Widget {
  export interface Cool_Widget {
    type?: Cool_Widget.WidgetType | undefined;
    state: Cool_Widget.WidgetState;
    label: string;
  }
}

export namespace Cool_Widget {
  export const WidgetType = { UNKNOWN: 0, BUTTON: 1, TEXTBOX: 2, DROPDOWN: 3, UNRECOGNIZED: -1 } as const;

  export type WidgetType = typeof WidgetType[keyof typeof WidgetType];

  export namespace WidgetType {
    export type UNKNOWN = typeof WidgetType.UNKNOWN;
    export type BUTTON = typeof WidgetType.BUTTON;
    export type TEXTBOX = typeof WidgetType.TEXTBOX;
    export type DROPDOWN = typeof WidgetType.DROPDOWN;
    export type UNRECOGNIZED = typeof WidgetType.UNRECOGNIZED;
  }
}

export function cool_Widget_WidgetTypeFromJSON(object: any): Cool_Widget.WidgetType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Cool_Widget.WidgetType.UNKNOWN;
    case 1:
    case "BUTTON":
      return Cool_Widget.WidgetType.BUTTON;
    case 2:
    case "TEXTBOX":
      return Cool_Widget.WidgetType.TEXTBOX;
    case 3:
    case "DROPDOWN":
      return Cool_Widget.WidgetType.DROPDOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Cool_Widget.WidgetType.UNRECOGNIZED;
  }
}

export function cool_Widget_WidgetTypeToJSON(object: Cool_Widget.WidgetType): string {
  switch (object) {
    case Cool_Widget.WidgetType.UNKNOWN:
      return "UNKNOWN";
    case Cool_Widget.WidgetType.BUTTON:
      return "BUTTON";
    case Cool_Widget.WidgetType.TEXTBOX:
      return "TEXTBOX";
    case Cool_Widget.WidgetType.DROPDOWN:
      return "DROPDOWN";
    case Cool_Widget.WidgetType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export namespace Cool_Widget {
  export const WidgetState = { HIDDEN: 0, ENABLED: 1, DISABLED: 2, LOADING: 3, UNRECOGNIZED: -1 } as const;

  export type WidgetState = typeof WidgetState[keyof typeof WidgetState];

  export namespace WidgetState {
    export type HIDDEN = typeof WidgetState.HIDDEN;
    export type ENABLED = typeof WidgetState.ENABLED;
    export type DISABLED = typeof WidgetState.DISABLED;
    export type LOADING = typeof WidgetState.LOADING;
    export type UNRECOGNIZED = typeof WidgetState.UNRECOGNIZED;
  }
}

export function cool_Widget_WidgetStateFromJSON(object: any): Cool_Widget.WidgetState {
  switch (object) {
    case 0:
    case "HIDDEN":
      return Cool_Widget.WidgetState.HIDDEN;
    case 1:
    case "ENABLED":
      return Cool_Widget.WidgetState.ENABLED;
    case 2:
    case "DISABLED":
      return Cool_Widget.WidgetState.DISABLED;
    case 3:
    case "LOADING":
      return Cool_Widget.WidgetState.LOADING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Cool_Widget.WidgetState.UNRECOGNIZED;
  }
}

export function cool_Widget_WidgetStateToJSON(object: Cool_Widget.WidgetState): string {
  switch (object) {
    case Cool_Widget.WidgetState.HIDDEN:
      return "HIDDEN";
    case Cool_Widget.WidgetState.ENABLED:
      return "ENABLED";
    case Cool_Widget.WidgetState.DISABLED:
      return "DISABLED";
    case Cool_Widget.WidgetState.LOADING:
      return "LOADING";
    case Cool_Widget.WidgetState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export declare namespace Cool_Container {
  export interface Cool_Container {
    layout: Cool_Container.Layout;
    widgets: Cool_Widget.Cool_Widget[];
  }
}

export namespace Cool_Container {
  export const Layout = { HORIZONTAL: 0, VERTICAL: 1, GRID: 2, UNRECOGNIZED: -1 } as const;

  export type Layout = typeof Layout[keyof typeof Layout];

  export namespace Layout {
    export type HORIZONTAL = typeof Layout.HORIZONTAL;
    export type VERTICAL = typeof Layout.VERTICAL;
    export type GRID = typeof Layout.GRID;
    export type UNRECOGNIZED = typeof Layout.UNRECOGNIZED;
  }
}

export function cool_Container_LayoutFromJSON(object: any): Cool_Container.Layout {
  switch (object) {
    case 0:
    case "HORIZONTAL":
      return Cool_Container.Layout.HORIZONTAL;
    case 1:
    case "VERTICAL":
      return Cool_Container.Layout.VERTICAL;
    case 2:
    case "GRID":
      return Cool_Container.Layout.GRID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Cool_Container.Layout.UNRECOGNIZED;
  }
}

export function cool_Container_LayoutToJSON(object: Cool_Container.Layout): string {
  switch (object) {
    case Cool_Container.Layout.HORIZONTAL:
      return "HORIZONTAL";
    case Cool_Container.Layout.VERTICAL:
      return "VERTICAL";
    case Cool_Container.Layout.GRID:
      return "GRID";
    case Cool_Container.Layout.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCool(): Cool.Cool {
  return {};
}

export namespace Cool {
  export const Cool: MessageFns<Cool.Cool> = {
    encode(message: Cool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.widget !== undefined) {
        Cool_Widget.Cool_Widget.encode(message.widget, writer.uint32(810).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): Cool {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCool();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 101: {
            if (tag !== 810) {
              break;
            }

            message.widget = Cool_Widget.Cool_Widget.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): Cool {
      return { widget: isSet(object.widget) ? Cool_Widget.Cool_Widget.fromJSON(object.widget) : undefined };
    },

    toJSON(message: Cool): unknown {
      const obj: any = {};
      if (message.widget !== undefined) {
        obj.widget = Cool_Widget.Cool_Widget.toJSON(message.widget);
      }
      return obj;
    },

    create(base?: DeepPartial<Cool>): Cool {
      return Cool.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<Cool>): Cool {
      const message = createBaseCool();
      message.widget = (object.widget !== undefined && object.widget !== null)
        ? Cool_Widget.Cool_Widget.fromPartial(object.widget)
        : undefined;
      return message;
    },
  };
}

function createBaseCool_Widget(): Cool_Widget.Cool_Widget {
  return { state: 0, label: "" };
}

export namespace Cool_Widget {
  export const Cool_Widget: MessageFns<Cool_Widget.Cool_Widget> = {
    encode(message: Cool_Widget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.type !== undefined) {
        writer.uint32(8).int32(message.type);
      }
      if (message.state !== 0) {
        writer.uint32(16).int32(message.state);
      }
      if (message.label !== "") {
        writer.uint32(26).string(message.label);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): Cool_Widget {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCool_Widget();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.type = reader.int32() as any;
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.state = reader.int32() as any;
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.label = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): Cool_Widget {
      return {
        type: isSet(object.type) ? cool_Widget_WidgetTypeFromJSON(object.type) : undefined,
        state: isSet(object.state) ? cool_Widget_WidgetStateFromJSON(object.state) : 0,
        label: isSet(object.label) ? globalThis.String(object.label) : "",
      };
    },

    toJSON(message: Cool_Widget): unknown {
      const obj: any = {};
      if (message.type !== undefined) {
        obj.type = cool_Widget_WidgetTypeToJSON(message.type);
      }
      if (message.state !== 0) {
        obj.state = cool_Widget_WidgetStateToJSON(message.state);
      }
      if (message.label !== "") {
        obj.label = message.label;
      }
      return obj;
    },

    create(base?: DeepPartial<Cool_Widget>): Cool_Widget {
      return Cool_Widget.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<Cool_Widget>): Cool_Widget {
      const message = createBaseCool_Widget();
      message.type = object.type ?? undefined;
      message.state = object.state ?? 0;
      message.label = object.label ?? "";
      return message;
    },
  };
}

function createBaseCool_Container(): Cool_Container.Cool_Container {
  return { layout: 0, widgets: [] };
}

export namespace Cool_Container {
  export const Cool_Container: MessageFns<Cool_Container.Cool_Container> = {
    encode(message: Cool_Container, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.layout !== 0) {
        writer.uint32(8).int32(message.layout);
      }
      for (const v of message.widgets) {
        Cool_Widget.Cool_Widget.encode(v!, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): Cool_Container {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCool_Container();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.layout = reader.int32() as any;
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.widgets.push(Cool_Widget.Cool_Widget.decode(reader, reader.uint32()));
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): Cool_Container {
      return {
        layout: isSet(object.layout) ? cool_Container_LayoutFromJSON(object.layout) : 0,
        widgets: globalThis.Array.isArray(object?.widgets)
          ? object.widgets.map((e: any) => Cool_Widget.Cool_Widget.fromJSON(e))
          : [],
      };
    },

    toJSON(message: Cool_Container): unknown {
      const obj: any = {};
      if (message.layout !== 0) {
        obj.layout = cool_Container_LayoutToJSON(message.layout);
      }
      if (message.widgets?.length) {
        obj.widgets = message.widgets.map((e) => Cool_Widget.Cool_Widget.toJSON(e));
      }
      return obj;
    },

    create(base?: DeepPartial<Cool_Container>): Cool_Container {
      return Cool_Container.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<Cool_Container>): Cool_Container {
      const message = createBaseCool_Container();
      message.layout = object.layout ?? 0;
      message.widgets = object.widgets?.map((e) => Cool_Widget.Cool_Widget.fromPartial(e)) || [];
      return message;
    },
  };
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
